### This file was generated by Nexus Schema
### Do not make changes to this file directly
directive @cacheControl(maxAge: Int) on FIELD_DEFINITION

type Achievement {
  Aggregates: FeedItemAggregates
  Categories: [Category]
  CategoryIDs: [String!]
  Media: [Media]
  Member: Member
  MemberID: String
  UserID: String
  collaboratedWith: String
  completionTimeInSeconds: Int
  createdAt: Int
  dateAccomplished: String
  description: String
  id: ID
  summary: String
  title: String
  updatedAt: Int
}

type AdditionalInformation {
  FileURL: String
  fileName: String
  fileSize: Float
  fileType: String
  objectID: String
  objectType: String
}

type Article {
  Aggregates: FeedItemAggregates
  Business: Business
  BusinessID: String
  Categories: [Category]
  CategoryIDs: [String!]
  FeedItem: FeedItem
  Member: Member
  MemberID: String
  UserID: String
  actor: String
  content(raw: Boolean): String
  coverCaption: String
  coverPhotoID: String
  coverPhotoURL(type: String): String
  createdAt: Long
  excerpt: String
  id: ID
  isCreatedByMentor: Boolean
  publishedAt: Long
  slug: String
  subtitle: String
  title: String
  updatedAt: Long
}

type Articles {
  count: Int
  items: [Article!]
  next: String
  total: Int
}

type Business {
  Activities(count: Int, cursor: String, objectType: String): FeedItemGroup!
  Aggregates: ProfileAggregates
  Categories: [Category!]
  CategoryIDs: [String!]
  Followers(count: Int, page: Int, type: String): [SocialProfile]
  Follows(count: Int, page: Int, type: String): [SocialProfile]
  Gallery(count: Int, cursor: String): Gallery!
  Partners: [SocialProfile]
  Reviews(count: Int, next: Int, rating: Int): Reviews
  Saves(count: Int, cursor: String): FeedItemGroup
  UserIDs: [String!]
  UserRoles: [BusinessUserRole!]
  ap5BestKnownFor: String
  ap5FavoriteEvents: String
  ap5InspiredBy: String
  ap5PassionateAbout: String
  ap5ProudestThing: String
  badge: String
  birthDate: String
  country: String
  coverPhotoID: String
  coverPhotoURL(type: String): String
  createdAt: Long
  description: String
  email: String
  id: ID
  isFollowed: Boolean
  isPartner: Boolean
  name: String
  nonProfitBusiness: Boolean
  partners: [String!]
  personalStatus: String
  phoneNumber: String
  plan: String
  postalCode: String
  profilePhotoID: String
  profilePhotoURL(type: String): String
  profileType: String
  serviceProvided: [String!]
  signUpNumber: Int
  slug: String
  statement: String
  updatedAt: Long
  website: String
  Medals(count: Int, next: String): NFTMedals!
}

type BusinessSubscriptionFeatures {
  addLinksInContent: Boolean!
  additionalTeamMembers: Int!
  followLimits: Int!
  prioritySupport: Boolean!
  recommendProfile: Boolean!
}

type BusinessSubscriptionPlan {
  description: String!
  id: ID!
  name: String!
  prices: [BusinessSubscriptionPlanPrice!]!
  type: String!
}

type BusinessSubscriptionPlanPrice {
  amount: String!
  currency: String!
  discounted: Boolean!
  id: ID!
  interval: String!
}

type BusinessTeamMember {
  Business: Business
  BusinessID: String
  Member: Member
  UserID: String
  createdAt: Long
  email: String
  id: String
  inactiveReason: String
  invitedBy: String
  role: String
  status: String
  updatedAt: Long
}

type BusinessTeamMembers {
  count: Int
  items: [BusinessTeamMember!]
  next: String
  total: Int
}

type BusinessUserRole {
  UserID: String
  createdAt: Long
  role: String
  updatedAt: Long
}

type Category {
  PhotoID: String
  PhotoURL(type: String): String
  archived: Boolean
  createdAt: Long
  iconName: String
  id: ID
  name: String
  parent: String
  summary: String
  updatedAt: Long
  productCategory: Boolean
  communityInterest: Boolean
}

type Comment {
  Aggregates: CommentAggregates
  Business: Business
  Member: Member
  actor: String
  actorID: String
  actorType: String
  content: String
  id: ID
  isHighFived: Boolean!
  isLiked: Boolean! @deprecated(reason: "Use isHighFived instead.")
  object: String
  objectActor: String
  objectID: String
  objectType: String
  time: Date
  timestamp: Long @deprecated(reason: "Use time instead.")
}

type CommentAggregates {
  highFives: Int
  likes: Int
}

type Content {
  Achievement: Achievement
  Article: Article
  Comment: Comment
  Product: Product
  Update: Update
  VideoFeed: VideoFeed
  object: ID
  objectID: String
  objectType: String
}

scalar Date

scalar DateTime

type FeedItem {
  Achievement: Achievement
  Aggregates: FeedItemAggregates!
  Article: Article
  Business: Business
  Categories: [Category!]
  CategoryIDs: [String!]
  Comments(count: Int, cursor: String): FeedItemComments!
  HighFives(count: Int, cursor: String): FeedItemLikes!
  Likes(count: Int, cursor: String): FeedItemLikes! @deprecated(reason: "Use HighFives instead.")
  Member: Member
  Update: Update
  VideoFeed: VideoFeed
  actor: String
  actorID: String
  actorType: String
  id: ID
  isHighFived: Boolean
  isLiked: Boolean @deprecated(reason: "Use isHighFived instead.")
  isSaved: Boolean
  object: String
  objectID: String
  objectType: String
  time: Date
  timestamp: Long
}

type FeedItemAggregates {
  comments: Int
  highFives: Int
  likes: Int
  saves: Int
  views: Int
}

type FeedItemComments {
  count: Int
  items: [Comment!]
  next: String
  total: Int
}

type FeedItemGroup {
  count: Int
  items: [FeedItem!]
  next: String
  total: Int
}

type FeedItemLikes {
  count: Int
  items: [SocialProfile!]
  next: String
  total: Int
}

type Followers {
  count: Int
  items: [SocialProfile!]
  next: String
  total: Int
}

type Follows {
  count: Int
  items: [SocialProfile!]
  next: String
  total: Int
}

type Gallery {
  count: Int
  items: [GalleryItem!]
  next: String
  total: Int
}

type GalleryItem {
  FeedItem: FeedItem
  PhotoURL(type: String): String
  VideoURL(type: String): String
  objectID: String
  objectType: String
}

type IdentifiedUserMembers {
  Member: Member
  email: String
  facebookUID: String
  googleUID: String
  phoneNumber: String
}

input InputAchievement {
  CategoryIDs: [String!]
  Media: [InputMedia!]
  collaboratedWith: String
  completionTimeInSeconds: Int
  content: String
  dateAccomplished: String
  description: String
  summary: String
  title: String
}

input InputAdditionalInformation {
  fileName: String!
  fileSize: Float!
  fileType: String!
  objectID: String!
  objectType: String!
}

input InputArticle {
  CategoryIDs: [String!]
  content: String
  coverCaption: String
  coverPhotoID: String
  excerpt: String
  subtitle: String
  title: String
}

input InputBusiness {
  CategoryIDs: [String!]
  ap5BestKnownFor: String
  ap5FavoriteEvents: String
  ap5InspiredBy: String
  ap5PassionateAbout: String
  ap5ProudestThing: String
  badge: String
  country: String
  coverPhotoID: String
  description: String
  email: String
  name: String
  nonProfitBusiness: Boolean
  partners: [String!]
  phoneNumber: String
  postalCode: String
  profilePhotoID: String
  profileType: String
  serviceProvided: [String!]
  statement: String
  website: String
}

input InputBusinessPlanPreRegistration {
  businessName: String!
  emailAddress: String!
  firstName: String!
  lastName: String!
  memberID: String
  website: String
}

input InputBusinessReview {
  BusinessID: String!
  content: String!
  rating: Int!
}

input InputContentReport {
  GetStreamActivityID: String!
  blockActor: Boolean!
  objectID: String!
  objectType: String!
  reason: String!
  unfollowActor: Boolean!
}

input InputInquiry {
  businessName: String
  content: String
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
}

input InputMedia {
  objectID: String!
  objectType: String!
}

input InputMentorApplication {
  brands: String
  experience: String
  expertise: String
  introduction: String
  links: String
  qualifications: String
  results: String
  socialHandles: String
}

input InputProduct {
  AdditionalInformation: [InputAdditionalInformation!]
  BusinessID: String
  CategoryIDs: [String!]
  Media: [InputMedia!]
  address1: String
  address2: String
  city: String
  country: String
  coverPhotoID: String
  currency: String
  description: String
  endDate: String
  endTime: String
  eventDistance: Float
  eventDistanceUnit: String
  externalURL: String
  inquiryType: String
  parentID: String
  postcode: String
  priceAmount: Float
  priceAmountMax: Float
  pricing: String
  repeats: Boolean
  startDate: String
  startTime: String
  state: String
  status: String
  suburb: String
  timezone: String
  title: String
  type: String
  virtual: Boolean
}

input InputProductContactForm {
  email: String!
  firstName: String!
  lastName: String!
  message: String!
  phoneNumber: String!
  productID: String!
  targetBusinessID: String!
}

input InputProfile {
  CategoryIDs: [String!]
  ap5FavoriteEvents: String
  ap5InspiredBy: String
  ap5PassionateAbout: String
  ap5ToughestThing: String
  ap5TrainingWith: String
  backgroundColor: String
  biography: String
  birthDate: String
  claimed: Boolean
  country: String
  coverPhotoID: String
  firstName: String
  followMentors: Boolean
  gender: String
  lastName: String
  partners: [String!]
  personalStatus: String
  phoneNumber: String
  postalCode: String
  profilePhotoID: String
  quotes: String
}

input InputTag {
  objectID: String!
  objectType: String!
  xCoordinate: String!
  yCoordinate: String!
}

input InputUpdate {
  CategoryIDs: [String!]
  Media: [InputMedia!]
  content: String
}

input InputUserIdentifier {
  email: String
  facebookUID: String
  googleUID: String
  phoneNumber: String
}

input InputVideoFeed {
  CategoryIDs: [String!]
  Media: [InputMedia!]
  description: String
  title: String
}

scalar JSON

scalar JSONObject

scalar Long

type Me {
  Articles: MyArticles
  BusinessRoles: [MyBusinessRole]
  Notifications(count: Int, cursor: String): MyNotifications
  Profile: MyProfile
  RecommendedBusinesses(count: Int): [RecommendedBusiness!]
  RecommendedFollows(count: Int): [RecommendedFollow!]
  RecommendedMembers(count: Int): [RecommendedMember!]
  Timeline(CategoryID: String, count: Int, cursor: String): FeedItemGroup
  Owner: Member
}

type Media {
  FileURL: String
  PhotoURL(type: String): String
  Pin: Pin
  VideoURL(type: String): String
  fileName: String
  objectID: String
  objectType: String
  url: String
  isNFTMedal: Boolean
  VideoThumbnail: String
  MedalURL: String
  orientation: String
}

type Member {
  Achievements: [Achievement]
  Activities(count: Int, cursor: String, objectType: String): FeedItemGroup!
  Aggregates: ProfileAggregates
  Categories: [Category!]!
  CategoryIDs: [String!]
  Followers(count: Int, page: Int, type: String): [SocialProfile]
  Follows(count: Int, page: Int, type: String): [SocialProfile]
  Gallery(count: Int, cursor: String): Gallery
  Mentor: Mentor
  Partners: [SocialProfile]
  Saves(count: Int, cursor: String): FeedItemGroup
  ap5FavoriteEvents: String
  ap5InspiredBy: String
  ap5PassionateAbout: String
  ap5ToughestThing: String
  ap5TrainingWith: String
  backgroundColor: String
  biography: String
  claimed: Boolean
  country: String
  coverPhotoID: String
  coverPhotoURL(type: String): String
  createdAt: Long
  firstName: String
  gender: String
  id: ID
  isFollowed: Boolean
  lastName: String
  name: String
  partners: [String!]
  personalStatus: String
  postalCode: String
  profilePhotoID: String
  profilePhotoURL(type: String): String
  quotes: String
  signUpNumber: Int
  slug: String
  updatedAt: Long
  Medals(count: Int, next: String): NFTUserMedals!
  publishedAt: Long
  suburb: String
  city: String
  state: String
  isPublished: Boolean
  email: String
}

type Mentor {
  MentorApplicationID: String
  UserID: String
  badge: String
  createdAt: Long
  id: ID
  updatedAt: Long
}

type MentorApplication {
  User: User
  UserID: String!
  createdAt: Long!
  id: ID
}

type Mutation {
  addComment(content: String!, objectID: String, objectType: String, targetGetStreamActivityID: String): MutationResult!
  addInterestCategory(CategoryID: String!): MutationResult!
  addPin(Tags: [InputTag!]!, photoID: String!): MutationResult!
  addReaction(contentID: String!, contentType: String!, type: String!): MutationResult!
  block(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  changeBusinessSubscription(PriceID: String): MutationResult!
  createAchievement(input: InputAchievement!): MutationResult!
  createArticle(BusinessID: String, input: InputArticle): MutationResult!
  createBusiness(input: InputBusiness!): MutationResult!
  createBusinessPlanPreRegistration(input: InputBusinessPlanPreRegistration!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'BusinessPlanPreRegistration' instead")
  createBusinessReview(input: InputBusinessReview!): MutationResult!
  createContentReport(input: InputContentReport!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'ContentReport' instead")
  createFormEntry(data: JSON, type: String!): MutationResult!
  createInquiry(input: InputInquiry!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'Inquiry' instead")
  createMentorApplication(input: InputMentorApplication!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'MentorApplication' instead")
  createProduct(BusinessID: String!, input: InputProduct!): MutationResult!
  createProductContactForm(input: InputProductContactForm!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'ProductInquiry' instead")
  createProfile(input: InputProfile!): MutationResult!
  createStripeCheckoutSession(PriceID: String!): MutationResult!
  createStripeCustomerPortalSession: MutationResult!
  createUpdate(BusinessID: String, input: InputUpdate!): MutationResult!
  createVideoFeed(input: InputVideoFeed!): MutationResult!
  decodeMemberClaim(challenge: String!): MutationResult!
  deleteAchievement(id: String!): MutationResult!
  deleteArticle(id: String!): MutationResult!
  deleteComment(GetStreamReactionID: String, id: String): MutationResult!
    @deprecated(reason: "Use removeComment instead.")
  deleteProduct(id: String!): MutationResult!
  deleteProducts(ids: [String!]!): MutationResult!
  deleteUpdate(id: String!): MutationResult!
  deleteVideoFeed(id: String!): MutationResult!
  downloadFile(objectID: String!, objectType: String!): MutationResult!
  editAchievement(id: String!, input: InputAchievement!): MutationResult!
  editArticle(id: String!, input: InputArticle!, patch: Boolean): MutationResult!
  editBusiness(id: String!, input: InputBusiness!, patch: Boolean): MutationResult!
  editBusinessReview(id: String!, input: InputBusinessReview!): MutationResult!
  editBusinessTeamMember(
    action: String!
    id: String!
    inactiveReason: String
    role: String
    status: String
  ): MutationResult!
  editComment(GetStreamReactionID: String, content: String!, id: String): MutationResult!
  editPin(Tags: [InputTag!]!, photoID: String!): MutationResult!
  editProduct(BusinessID: String!, id: String!, input: InputProduct!): MutationResult!
  editProfile(input: InputProfile!, set: Boolean): MutationResult!
  editUpdate(id: String!, input: InputUpdate!, patch: Boolean): MutationResult!
  editVideoFeed(id: String!, input: InputVideoFeed!, patch: Boolean): MutationResult!
  follow(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  followMany(profiles: [String!]!): MutationResult!
  hide(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  highFive(contentID: String!, contentType: String!): MutationResult! @deprecated(reason: "Use addReaction instead.")
  inviteTeamMember(emails: [String!]!, slugs: [String!]!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'InviteTeamMember' instead")
  like(
    CommentID: String
    FeedItemID: String
    contentID: String
    contentType: String
    targetGetStreamActivityID: String
    targetGetStreamReactionID: String
  ): MutationResult! @deprecated(reason: "Use highFive or addReaction instead.")
  linkMemberToBusiness(challenge: String!): MutationResult!
  markNotificationsRead(id: String): MutationResult!
  markNotificationsSeen: MutationResult!
  publishArticle(BusinessID: String, id: String!): MutationResult!
  publishProducts(ids: [String!]!): MutationResult!
  removeComment(id: String!): MutationResult!
  removeInterestCategory(CategoryID: String!): MutationResult!
  removeReaction(contentID: String!, contentType: String!, type: String!): MutationResult!
  save(FeedItemID: String, contentID: String, contentType: String, targetGetStreamActivityID: String): MutationResult!
  saveProduct(id: String!): MutationResult!
  suggestInterestCategory(name: String!): MutationResult!
    @deprecated(reason: "Use createFormEntry with type 'CategorySuggestion' instead")
  unblock(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  unfollow(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  unhide(targetBusinessID: String, targetID: String, targetMemberID: String, targetType: String): MutationResult!
  unhighFive(contentID: String!, contentType: String!): MutationResult!
    @deprecated(reason: "Use removeReaction with type of 'highFive' instead.")
  unlike(
    CommentID: String
    FeedItemID: String
    contentID: String
    contentType: String
    targetGetStreamActivityID: String
    targetGetStreamReactionID: String
  ): MutationResult! @deprecated(reason: "Use removeReaction with type of 'highFive' instead.")
  unpublishArticle(id: String!): MutationResult!
  unpublishProducts(ids: [String!]!): MutationResult!
  unsave(
    FeedItemID: String
    contentID: String
    contentType: String
    targetGetStreamActivityID: String
  ): MutationResult! @deprecated(reason: "Use removeReaction with type of 'save' instead.")
  unsaveProduct(id: String!): MutationResult!
  viewArticle(id: String!): MutationResult! @deprecated(reason: "Use viewArticleByID or viewArticleBySlug instead.")
  viewArticleByID(id: String!): Article!
  viewArticleBySlug(slug: String!): Article!
  viewProduct(id: String!): MutationResult! @deprecated(reason: "Use viewProductByID or viewProductBySlug instead.")
  viewProductByID(id: String!): Product!
  viewProductBySlug(slug: String!): Product!
  highFiveNFTUserMedal(id: String!): MutationResult!
  unhighFiveNFTUserMedal(id: String!): MutationResult!
  downloadMedal(objectID: String!, objectType: String!): MutationResult!
  NFTClaimMemberProfile(userMedalID: String): MutationResult!
  highFiveNFTMedal(id: String!): MutationResult!
  unhighFiveNFTMedal(id: String!): MutationResult!
}

type MutationResult {
  objectID: String
  objectType: String
  success: Boolean
  timestamp: Long
}

type MyArticleAggregates {
  comments: Int
  drafts: Int
  likes: Int
  published: Int
  saves: Int
  shares: Int
  views: Int
}

type MyArticles {
  AccountProfiles: [SocialProfile!]
  Aggregates: MyArticleAggregates
  Drafts: [Article!]
  Published: [Article!]
}

type MyBusinessRole {
  Business: Business
  BusinessID: String
  UserID: String
  createdAt: Long
  role: String
  updatedAt: Long
}

type MyBusinessSubscription {
  canceled: Boolean
  creationTime: DateTime
  features: BusinessSubscriptionFeatures!
  interval: String
  isPaid: Boolean!
  periodEndTime: DateTime
  periodStartTime: DateTime
  type: String!
}

type MyMemberProfile {
  Achievements: [Achievement]
  Activities(count: Int, cursor: String, objectType: String): FeedItemGroup!
  Aggregates: ProfileAggregates
  Categories: [Category!]!
  CategoryIDs: [String!]
  Followers(count: Int, page: Int, type: String): [SocialProfile]
  Follows(count: Int, page: Int, type: String): [SocialProfile]
  Gallery(count: Int, cursor: String): Gallery
  Mentor: Mentor
  Partners: [SocialProfile]
  Saves(count: Int, cursor: String): FeedItemGroup
  UserID: String
  ap5FavoriteEvents: String
  ap5InspiredBy: String
  ap5PassionateAbout: String
  ap5ToughestThing: String
  ap5TrainingWith: String
  backgroundColor: String
  biography: String
  birthDate: String
  country: String
  coverPhotoID: String
  coverPhotoURL(type: String): String
  createdAt: Long
  email: String
  firstName: String
  followMentors: Boolean
  gender: String
  id: ID
  isFollowed: Boolean
  lastName: String
  name: String
  partners: [String!]
  personalStatus: String
  phoneNumber: String
  postalCode: String
  preRegistered: Boolean
  profilePhotoID: String
  profilePhotoURL(type: String): String
  quotes: String
  signUpNumber: Int
  slug: String
  updatedAt: Long
}

type MyNotifications {
  count: Int
  items: [MyNotificationsItem!]
  next: String
  total: Int
}

type MyNotificationsItem {
  Achievement: Achievement
  Article: Article
  Business: Business
  Comment: Comment
  Member: Member
  Profiles: [SocialProfile!]
  Reaction: Reaction
  ReactionID: String
  Update: Update
  actorCount: Int
  date: String
  group: String
  id: String
  isRead: Boolean
  isSeen: Boolean
  kind: String
  message: String
  objectID: String
  objectType: String
  timestamp: Long
}

type MyProductAggregate {
  activeProgram: Int
  draft: Int
  event: Int
  experience: Int
  expired: Int
  published: Int
  publishedExpired: Int
  unpublished: Int
}

type MyProfile {
  Business: Business
  Member: MyMemberProfile
  objectID: String
  objectType: String
}

type PagedContents {
  count: Int
  items: [Content!]
  next: String
  total: Int
}

type Pin {
  Tags: [Tag!]
  createdAt: Long
  photoID: String
}

type Product {
  AdditionalInformation: [AdditionalInformation!]
  Business: Business
  Categories: [Category!]
  CategoryIDs: [String!]
  Media: [Media!]
  UserID: String
  actorID: String
  actorType: String
  address1: String
  address2: String
  businessPaidPlan: Int
  certifiedBusiness: Int
  city: String
  country: String
  coverPhotoID: String
  coverPhotoURL(type: String): String
  createdAt: Float
  currency: String
  description: String
  endDate: String
  endTime: String
  externalURL: String
  hibernation: Boolean
  hidden: Boolean
  id: ID
  inquiryType: String
  isFavorite: Boolean
  isSaved: Boolean
  parentID: String
  postcode: String
  priceAmount: Float
  priceAmountMax: Float
  pricing: String
  recommendsCount: Int
  repeats: Boolean
  savesCount: Int
  slug: String
  startDate: String
  startTime: String
  state: String
  status: String
  suburb: String
  timezone: String
  title: String
  type: String
  updatedAt: Float
  viewerCurrency(preferredCurrency: String): String
  viewerPrice(preferredCurrency: String): Float
  viewerPriceMax(preferredCurrency: String): Float
  viewsCount: Int
  virtual: Boolean
  Sponsors: [ProductSponsor!]
  isNFTMedal: Boolean
  sponsorIDs: [String!]
  NFTMedals: [NFTMedals]
  Distance: [ProductDistance!]
  ProductTheme: ProductTheme
}

type ProductPriceRange {
  priceMax: Float
  priceMin: Float
}

type ProductProfileReaction {
  count: Int
  items: [Product!]
  next: String
  total: Int
}

type ProductReaction {
  Saved(count: Int): ProductProfileReaction
}

type ProductsPage {
  count: Int
  items: [Product!]
  next: String
  total: Int
}

type ProfileAggregates {
  achievements: Int
  articles: Int
  articlesCommentsReceived: Int
  articlesDrafted: Int
  articlesHighFivesReceived: Int
  articlesLikesReceived: Int @deprecated(reason: "Use articlesHighFives instead.")
  articlesPublished: Int
  articlesSavesAcquired: Int
  articlesShared: Int
  articlesViewsAcquired: Int
  blocks: Int
  blocksAcquired: Int
  comments: Int
  commentsReceived: Int
  followers: Int
  follows: Int
  hides: Int
  hidesAcquired: Int
  highFives: Int
  highFivesReceived: Int
  likes: Int @deprecated(reason: "Use highFives instead.")
  likesReceived: Int @deprecated(reason: "Use highFivesReceived instead.")
  productSaves: Int
  productSavesAcquired: Int
  productViews: Int
  productViewsAcquired: Int
  products: Int
  rating: Float
  reviews: Int
  saves: Int
  savesAcquired: Int
  totalRates: Int
  updates: Int
  videoFeeds: Int
  acticlesViewsAcquired: Int
  articlesCommentReceived: Int
}

type Query {
  Achievement(id: String!): Achievement @deprecated(reason: "Use findAchievementByID.")
  Article(id: String, slug: String): Article @deprecated(reason: "Use either findArticleByID or findArticleBySlug.")
  Articles(categories: String, categoryParent: String, count: Int, offset: Int, sortBy: String): Articles!
    @deprecated(reason: "Use getDiscoveryArticles instead.")
  Business(id: String, slug: String): Business @deprecated(reason: "Use either findBusinessByID or findBusinessBySlug")
  BusinessFeed(count: Int, cursor: String, id: String!, objectType: String): FeedItemGroup!
    @deprecated(reason: "Use getFeed with type: 'Business'.")
  Categories: [Category!]! @deprecated(reason: "Use getActiveCategories instead.")
  CategoriesWithProducts: [Category!]!
    @deprecated(reason: "Use getActiveCategories with 'hasProductsOnly: true' instead.")
  Category(id: String!): Category @deprecated(reason: "Use findCategory.")
  CategoryFeed(count: Int, cursor: String, id: String, objectType: String): FeedItemGroup!
    @deprecated(reason: "Use getFeed with type: 'Category'.")
  FeedItem(
    AchievementID: String
    ArticleID: String
    ArticleSlug: String
    GetStreamActivityID: String
    UpdateID: String
    UpdateSlug: String
    VideoFeedID: String
    VideoFeedSlug: String
    id: String
  ): FeedItem @deprecated(reason: "Use getter for objects directly.")
  FileURL(id: String!, type: String): String @deprecated(reason: "Use getFileURL.")
  Me: Me! @deprecated(reason: "Use getters with getMy- prefixes instead.")
  Member(UserID: String, id: String, slug: String): Member
    @deprecated(reason: "Use either findMemberByID, findMemberBySlug, or findMemberByUserID instead.")
  MemberFeed(count: Int, cursor: String, id: String!, objectType: String): FeedItemGroup!
    @deprecated(reason: "Use getFeed with type: 'Member'.")
  MentorAndBusinessSuggestions(count: Int, text: String!): [SocialMentionSuggestion!]!
  MyProductsAggregates(actorID: String, actorType: String): MyProductAggregate!
    @deprecated(reason: "Use getMyProductsAggregates instead.")
  PhotoURL(id: String!, type: String): String! @deprecated(reason: "Use getPhotoURL.")
  Product(id: String, preferredCurrency: String, slug: String): Product
    @deprecated(reason: "Use either findProductByID or findProductrBySlug instead.")
  ProductPriceRange(preferredCurrency: String): ProductPriceRange!
    @deprecated(reason: "Use getMarketplaceProductPriceRange instead.")
  ProductReactions(actorID: String!, actorType: String!, count: Int, skip: Int, verb: String): ProductReaction!
    @deprecated(reason: "Use getContentsReactedTo with reactionType 'save' and contentType 'Product' instead.")
  ProductSuggestions(count: Int, text: String): [SocialSearchSuggestion!]!
  Products(
    businessID: String
    category: String
    count: Int
    dateFrom: String
    dateTo: String
    filterType: String
    hidden: Boolean
    locationCountry: String
    locationState: String
    offset: Int
    preferredCurrency: String
    priceFrom: Int
    priceTo: Int
    priceType: String
    sortBy: String
    status: String
    title: String
    type: String
    virtual: Boolean
  ): ProductsPage! @deprecated(reason: "Use getMarketplaceProducts instead.")
  RecommendedBusinesses(count: Int, skip: Int): [Business!]! @deprecated(reason: "Use getPopularBusinesses instead.")
  RecommendedMembers(count: Int, skip: Int): [Member!]! @deprecated(reason: "Use getPopularMembers instead.")
  RecommendedProducts(count: Int, id: String, skip: String): [Product!]!
    @deprecated(reason: "Use getSimilarProducts instead.")
  SocialMentionSuggestions(count: Int, text: String!): [SocialMentionSuggestion!]!
  SocialSearchResult(count: Int, objectTypes: [String!], offset: Int, page: Int, text: String!): SocialSearchResult!
    @deprecated(reason: "Use getSocialSearchResult instead.")
  SocialSearchSuggestions(count: Int, text: String!): [SocialSearchSuggestion!]!
    @deprecated(reason: "Use getSocialSearchSuggestions instead.")
  Update(id: String, slug: String): Update @deprecated(reason: "Use either findUpdateByID or findUpdateBySlug.")
  VideoFeed(id: String, slug: String): VideoFeed
    @deprecated(reason: "Use either findVideoFeedByID or findVideoFeedBySlug.")
  VideoURL(id: String!, type: String): String!
  findAchievementByID(id: String!): Achievement
  findArticleByID(id: String!): Article
  findArticleBySlug(slug: String!): Article
  findBusinessByID(id: String!): Business
  findBusinessBySlug(slug: String!): Business
  findCategory(id: String!): Category
  findMemberByID(id: String!): Member
  findMemberBySlug(slug: String!): Member
  findMemberByUserID(id: String!): Member
  findMembersFromIdentifiers(list: [InputUserIdentifier!]!): [IdentifiedUserMembers!]
  findProductByID(id: String!): Product
  findProductBySlug(slug: String!): Product
  findUpdateByID(id: String!): Update
  findUpdateBySlug(slug: String!): Update
  findVideoFeedByID(id: String!): VideoFeed
  findVideoFeedBySlug(slug: String!): VideoFeed
  getActiveCategories(hasProductsOnly: Boolean): [Category!]!
  getBusinessSubscriptionPlans: [BusinessSubscriptionPlan!]!
  getContentsReactedTo(
    actorID: String!
    actorType: String!
    contentType: String
    count: Int
    cursor: String
    reactionType: String!
  ): PagedContents
  getDiscoveryArticles(
    categories: String
    categoryParent: String
    count: Int
    noCache: Boolean
    offset: Int
    sortBy: String
  ): Articles!
  getFeed(count: Int, cursor: String, id: String, objectType: String, type: String!): FeedItemGroup!
  getFeedItem(
    AchievementID: String
    ArticleID: String
    ArticleSlug: String
    GetStreamActivityID: String
    UpdateID: String
    UpdateSlug: String
    VideoFeedID: String
    VideoFeedSlug: String
    id: String
  ): FeedItem @deprecated(reason: "Use getter for objects directly.")
  getFileURL(id: String!, type: String): String
  getMarketplaceProductCountries: [String!]
  getMarketplaceProductPriceRange(preferredCurrency: String): ProductPriceRange!
  getMarketplaceProducts(
    businessID: String
    category: String
    count: Int
    dateFrom: String
    dateTo: String
    filterType: String
    hidden: Boolean
    locationCountry: String
    locationState: String
    offset: Int
    preferredCurrency: String
    priceFrom: Int
    priceTo: Int
    priceType: String
    sortBy: String
    status: String
    title: String
    type: String
    virtual: Boolean
  ): ProductsPage!
  getMyActiveBusinessProfile: Business
  getMyArticles: MyArticles!
  getMyBusinessRoles: [MyBusinessRole!]!
  getMyBusinessSubscription: MyBusinessSubscription
  getMyFeed(CategoryID: String, count: Int, cursor: String): FeedItemGroup!
  getMyMemberProfile: MyMemberProfile
  getMyNotifications(count: Int, cursor: String): MyNotifications!
  getMyProductsAggregates(actorID: String, actorType: String): MyProductAggregate!
  getMyProfile: MyProfile
  getPhotoURL(id: String!, type: String): String!
  getPin(photoID: String!): Pin
  getPopularBusinesses(count: Int, skip: Int): [Business!]!
  getPopularMembers(count: Int, skip: Int): [Member!]!
  getRecommendedBusinesses(count: Int): [Business!]
  getRecommendedMembers(count: Int): [Member!]
  getRecommendedProfiles(count: Int): [SocialProfile!]
  getSimilarProducts(count: Int, id: String, skip: String): [Product!]!
  getSocialMentionSuggestions(count: Int, text: String!): [SocialMentionSuggestion!]!
    @deprecated(reason: "Use getSocialMentionSuggestions instead.")
  getSocialSearchResult(count: Int, objectTypes: [String!], offset: Int, page: Int, text: String!): SocialSearchResult!
  getSocialSearchSuggestions(count: Int, text: String!): [SocialSearchSuggestion!]!
  getStripeSession(session_id: String!): StripeSession
  getTeamMembers(businessID: String, count: Int, offset: Int, status: String): BusinessTeamMembers!
  getVideoURL(id: String!, type: String): String!
  isExistingMemberEmail(email: String!): Boolean
  isUniqueBusinessEmail(email: String!): Boolean
  getNFTMedal(id: String, slug: String): NFTMedal
  getNFTUserMedal(id: String, slug: String): NFTUserMedal
  getAllUpcomingMedals(businessID: String, businessSlug: String): NFTMedals
  getVideoDimension(url: String!): MediaDimension
  getNFTPostEventMedal(id: String, slug: String): NFTPostEventMedal
  getOriginalURLFromCode(code: String!): String
  getHomepageProductCountries(text: String): [String!]
  getHomepagePopularAndUpcomingProduct: Product!
}

type Reaction {
  Achievement: Achievement
  Article: Article
  Business: Business
  Comment: Comment
  Member: Member
  Update: Update
  actor: String
  actorID: String
  actorType: String
  content: JSON
  id: ID
  object: String
  objectActor: String
  objectID: String
  objectType: String
  time: Date
}

type RecommendedBusiness {
  Business: Business
  objectID: String
  objectType: String
}

type RecommendedFollow {
  Business: Business
  Member: Member
  objectID: String
  objectType: String
}

type RecommendedMember {
  Member: Member
  objectID: String
  objectType: String
}

type Review {
  Member: Member
  TargetBusiness: Business
  actorID: String
  actorType: String
  content: String
  createdAt: Long
  id: ID
  rating: Int
  targetID: String
  targetType: String
  updatedAt: Long
}

type Reviews {
  count: Int
  items: [Review!]
  next: String
  total: Int
}

type Saves {
  count: Int
  items: [SocialActivity!]
  next: String
  total: Int
}

type SocialActivity {
  Achievement: Achievement
  Article: Article
  Update: Update
  VideoFeed: VideoFeed
  objectID: String
  objectType: String
}

type SocialMentionSuggestion {
  Article: Article
  Business: Business
  Member: Member
  objectID: String
  objectType: String
  score: Float
}

type SocialProfile {
  Business: Business
  Member: Member
  objectID: String
  objectType: String
}

type SocialSearchResult {
  items: [SocialSearchResultItem!]
  objectTypes: [String!]
  text: String
}

type SocialSearchResultItem {
  Article: Article
  Business: Business
  Member: Member
  Product: Product
  objectID: String
  objectType: String
  tags: [String]
}

type SocialSearchSuggestion {
  Article: Article
  Business: Business
  Member: Member
  Product: Product
  objectID: String
  objectType: String
  score: Float
}

type StripeSession {
  amount_total: Float
  amount_total_converted: String
  currency: String
}

type Tag {
  Business: Business
  Member: Member
  Product: Product
  createdAt: Long
  objectID: String
  objectType: String
  xCoordinate: String
  yCoordinate: String
}

type Update {
  Aggregates: FeedItemAggregates
  Business: Business
  BusinessID: String
  Categories: [Category!]
  CategoryIDs: [String!]
  Media: [Media!]
  Member: Member
  MemberID: String
  UserID: String
  content: String
  createdAt: Long
  id: ID
  publishedAt: Long
  slug: String
  updatedAt: Long
  isNFTMedal: Boolean
  productID: String
  ProductTheme: ProductTheme
}

type Updates {
  count: Int
  items: [Update!]
  next: String
  total: Int
}

type User {
  MentorID: String
  UserProfileID: String
  createdAt: Long
  displayName: String
  email: String
  emailVerified: Boolean
  id: ID
  name: String
  updatedAt: Long
}

type VideoFeed {
  Business: Business
  BusinessID: String
  Categories: [Category!]
  CategoryIDs: [String!]
  Media: [Media!]
  Member: Member
  MemberID: String
  UserID: String
  createdAt: Long
  description: String
  id: ID
  publishedAt: Long
  slug: String
  title: String
  updatedAt: Long
}

type VideoFeeds {
  count: Int
  items: [VideoFeed!]
  next: String
  total: Int
}

type NFTMedal {
  id: ID
  createdAt: Float
  updatedAt: Float
  medalDescription: String
  medalPhotoID: String
  productID: String
  Product: Product
  slug: String
  isFinished: Boolean
  highFives: Int
  isHighFived: Boolean
  Media: [Media!]
  Racer: NFTUserMedals
}

type NFTUserMedal {
  id: ID
  slug: String
  createdAt: Float
  updatedAt: Float
  actor: String
  productID: String
  medalID: String
  blockchainHash: String
  place: String
  time: String
  distance: Float
  distanceUnit: String
  distanceType: String
  overallFinish: String
  ageGroupFinish: String
  peopleParticipated: String
  Member: Member
  Business: Business
  Product: Product
  Medal: NFTMedal
  highFives: Int
  isHighFived: Boolean
  Media: [Media!]
  bib: String
  signUpNumber: Int
  country: String
  profilePhotoURL(type: String): String
  gender: String
  firstName: String
  lastName: String
  isClaimed: Boolean
  phoneNumber: String
  userSlug: String
}

type ProductSponsor {
  id: ID
  createdAt: Long
  name: String
  photoID: String
  photoExtension: String
  PhotoURL: String
  externalURL: String
}

type NFTUserMedals {
  items: [NFTUserMedal!]
  count: Int
  next: String
  total: Int
}

type NFTMedals {
  items: [NFTMedal!]
  count: Int
  next: String
  total: Int
}

type MediaDimension {
  width: String
  height: String
  duration: String
}

type NFTPostEventMedal {
  id: ID
  createdAt: Float
  updatedAt: Float
  medalDescription: String
  productID: String
  slug: String
  isFinished: Boolean
  Media(distance: Float!, distanceUnit: String!, distanceType: String): [Media!]
  Product: Product
  highFives: Int
  isHighFived: Boolean
  Racer: NFTUserMedals
  distances: [String]
  peopleParticipated(distance: Float!, distanceUnit: String!, distanceType: String): Int
  averageFinishTime(distance: Float!, distanceUnit: String!, distanceType: String): String
  Top3Male(distance: Float!, distanceUnit: String!, distanceType: String): [NFTPostEventMedalTop]
  Top3Female(distance: Float!, distanceUnit: String!, distanceType: String): [NFTPostEventMedalTop]
}

type NFTPostEventMedalTop {
  place: String
  name: String
  time: String
  actor: String
  firstName: String
  lastName: String
  isClaimed: Boolean
  profilePhotoURL(type: String): String
}

type ProductDistance {
  id: ID
  distance: Float
  distanceUnit: String
  distanceType: String
  hasMedal: Boolean
}

type ProductTheme {
  id: ID
  backgroundColor: String
  fontColor: String
  buttonColor: String
  circleColor: String
}
